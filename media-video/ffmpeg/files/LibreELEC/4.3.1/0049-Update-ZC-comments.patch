From 27dfd5b882c6b219888533a0fb8bb2fce9fb48a3 Mon Sep 17 00:00:00 2001
From: John Cox <jc@kynesim.co.uk>
Date: Mon, 6 Jul 2020 16:32:02 +0100
Subject: [PATCH 49/54] Update ZC comments

---
 libavcodec/rpi_zc.h | 100 ++++++++++++++++++++++++++++++++++----------
 1 file changed, 77 insertions(+), 23 deletions(-)

diff --git a/libavcodec/rpi_zc.h b/libavcodec/rpi_zc.h
index 18e71314bb..f00a7c962c 100644
--- a/libavcodec/rpi_zc.h
+++ b/libavcodec/rpi_zc.h
@@ -71,11 +71,16 @@ typedef struct AVRpiZcFrameGeometry
     unsigned int video_height;  // Requested height
 } AVRpiZcFrameGeometry;
 
-
+// Get expected MMAL geometry for a given format, width & height
 AVRpiZcFrameGeometry av_rpi_zc_frame_geometry(
     const int format,
     const unsigned int video_width, const unsigned int video_height);
 
+//----------------------------------------------------------------------------
+//
+// Calls that extract info from a ZC frame whether internally or externally
+// allocated
+
 // Generate a ZC reference to the buffer(s) in this frame
 // If the buffer doesn't appear to be one allocated by ZC
 // then the behaviour depends on maycopy:
@@ -87,6 +92,10 @@ AVRpiZcFrameGeometry av_rpi_zc_frame_geometry(
 AVRpiZcRefPtr av_rpi_zc_ref(void * const logging_context, const AVZcEnvPtr zc,
     const struct AVFrame * const frame, const enum AVPixelFormat expected_format, const int maycopy);
 
+// Unreference the buffer refed/allocated by _zc_ref
+// If fr_ref is NULL then this will NOP
+void av_rpi_zc_unref(AVRpiZcRefPtr fr_ref);
+
 // Get the vc_handle from the frame ref
 // Returns -1 if ref doesn't look valid
 int av_rpi_zc_vc_handle(const AVRpiZcRefPtr fr_ref);
@@ -104,12 +113,31 @@ int av_rpi_zc_numbytes(const AVRpiZcRefPtr fr_ref);
 // Geometry this frame was allocated with
 const AVRpiZcFrameGeometry * av_rpi_zc_geometry(const AVRpiZcRefPtr fr_ref);
 
-// Unreference the buffer refed/allocated by _zc_ref
-// If fr_ref is NULL then this will NOP
-void av_rpi_zc_unref(AVRpiZcRefPtr fr_ref);
+//----------------------------------------------------------------------------
+//
+// Calls for external frame allocation
+
+// Callbacks registered in av_rpi_zc_init2
+
+// Callback to allocate a buf for a frame
+// The frame itself is generated in the calling code
+//
+// Parameters:
+//   pool_env  value passed to av-rpi_zc_init2
+//   size      size wanted
+//   geo       geometry of the frame to be allocated
+// Returns:
+//   NULL      Alloc failed
+//   ptr       AVBufferBuf* of allocated buffer
+//             In most cases av_rpi_zc_buf will be called by this function
+//             and this will be the buf returned by that.
+typedef AVBufferRef * av_rpi_zc_alloc_buf_fn_t(void * pool_env, size_t size,
+                                               const AVRpiZcFrameGeometry * geo);
 
-// Test to see if the context is using zc (checks get_buffer2)
-int av_rpi_zc_in_use(const struct AVCodecContext * const s);
+// Callback once ffmpeg is completely done with this pool
+// Called once all allocated buffers have been derefed and ffmpegs ref to this
+// pool has been dropped
+typedef void av_rpi_zc_free_pool_fn_t(void * pool_env);
 
 // Init ZC into a context
 // Sets opaque, get_buffer2, thread_safe_callbacks
@@ -117,11 +145,6 @@ int av_rpi_zc_in_use(const struct AVCodecContext * const s);
 // all decoders
 // RPI HEVC decoders will allocate appropriate VCSM buffers which can be taken
 // apart by av_rpi_zc_xxx calls without this
-
-typedef AVBufferRef * av_rpi_zc_alloc_buf_fn_t(void * pool_env, size_t size,
-                                               const AVRpiZcFrameGeometry * geo);
-typedef void av_rpi_zc_free_pool_fn_t(void * pool_env);
-
 int av_rpi_zc_init2(struct AVCodecContext * const s,
                     void * pool_env, av_rpi_zc_alloc_buf_fn_t * alloc_buf_fn,
                     av_rpi_zc_free_pool_fn_t * free_pool_fn);
@@ -129,10 +152,52 @@ int av_rpi_zc_init2(struct AVCodecContext * const s,
 // Free ZC from a context
 void av_rpi_zc_uninit2(struct AVCodecContext * const s);
 
+// Get minimum pool size in frames - valid by the time the first alloc request
+// occurs.  Takes into account thread requests and DPB sizes derived from SPS
+// rather than just adding a worst case DPB size.
+unsigned int av_rpi_zc_get_decoder_pool_size(const AVZcEnvPtr zc);
+
+typedef struct av_rpi_zc_buf_fn_tab_s {
+    // This AVBuffer is being freed by ffmpeg - return memory
+    // to external pool. Memory may be, but need not be, unmapped.
+    // v is the ptr passed in av_rpi_zc_buf
+    void (* free)(void * v);
+
+    // Return appropriate handles / mappings
+    // v is the ptr passed in av_rpi_zc_buf
+    unsigned int (* vcsm_handle)(void * v);
+    unsigned int (* vc_handle)(void * v);
+    void * (* map_arm)(void * v);
+    unsigned int (* map_vc)(void * v);
+} av_rpi_zc_buf_fn_tab_t;
+
+// Allocate a ZC AVBufferRef and set its callback table
+// Doesn't take a buffer address directly - relies on callbacks to return
+// addresses as they are required.  Mappings need not be generated until
+// the map callbacks are called but they should persist from then until
+// the buffer is freed.
+//
+// Parameters:
+//   numbytes    Size of the buffer
+//   addr_offset Offset to first usable byte of buffer (for alignment)
+//               normally 0
+//   v           Pointer passed to callbacks
+//   fn_tab      Function table
+AVBufferRef * av_rpi_zc_buf(size_t numbytes, int addr_offset, void * v, const av_rpi_zc_buf_fn_tab_t * fn_tab);
+
+// Get v ptr set in in av_rpi_zc_buf
+void * av_rpi_zc_buf_v(AVBufferRef * const buf);
+
+//----------------------------------------------------------------------------
+//
+// Mostly internal calls but might possibly be wanted by outside code
+
 void av_rpi_zc_int_env_freep(AVZcEnvPtr * zc);
 AVZcEnvPtr av_rpi_zc_int_env_alloc(void * const logctx);
 void av_rpi_zc_set_decoder_pool_size(const AVZcEnvPtr zc, const unsigned int pool_size);
-unsigned int av_rpi_zc_get_decoder_pool_size(const AVZcEnvPtr zc);
+
+// Test to see if the context is using zc (checks get_buffer2)
+int av_rpi_zc_in_use(const struct AVCodecContext * const s);
 
 // Get buffer generates placeholders for later alloc
 int av_rpi_zc_get_buffer(const AVZcEnvPtr zc, AVFrame * const frame);
@@ -150,17 +215,6 @@ int av_rpi_zc_set_valid_frame(AVFrame * const frame);
 int av_rpi_zc_set_broken_frame(AVFrame * const frame);
 
 
-typedef struct av_rpi_zc_buf_fn_tab_s {
-    void (* free)(void * v);
-
-    unsigned int (* vcsm_handle)(void * v);
-    unsigned int (* vc_handle)(void * v);
-    void * (* map_arm)(void * v);
-    unsigned int (* map_vc)(void * v);
-} av_rpi_zc_buf_fn_tab_t;
-
-AVBufferRef * av_rpi_zc_buf(size_t numbytes, int addr_offset, void * v, const av_rpi_zc_buf_fn_tab_t * fn_tab);
-void * av_rpi_zc_buf_v(AVBufferRef * const buf);
 
 
 AVZcEnvPtr av_rpi_zc_env_alloc(void * logctx,
-- 
2.29.2

