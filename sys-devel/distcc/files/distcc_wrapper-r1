#!/bin/bash
# If caller has set PATH to include /usr/lib/distcc/bin (or prefix-equivalent),
# we have to sanitize it so distcc doesn't end up calling this script again.
oIFS=$IFS
IFS=:
old_path=( $PATH )
IFS=$oIFS
PATH=""
for dir in "${old_path[@]}"; do
	[[ "${dir}" != *"/usr/lib/distcc/bin" ]] && PATH=${PATH:+${PATH}:}"$dir"
done
export PATH
read -r TUPLE < /etc/distcc/tuple
TUPLE=${CHOST:-${TUPLE}}
DISTCC=$(type -p distcc)

args_not_target() {
	[[ $# -gt 0 ]] || return 0
	local arg
	for arg in "$@"; do
		case "$arg" in
			--target=*)
				return 1
			;;
			-target)
				return 1
			;;
			-triple=*)
				return 1
			;;
			-triple)
				return 1
			;;
		esac
	done
}

progname="${0##*/}"
case "${progname}" in
	distcc_wrapper)
		echo "This script should only be called through symlinks in /usr/lib/distcc/bin" 1>&2
		exit 1
	;;
	c99)
		# Cribbed from /usr/bin/c99
		exec "${DISTCC}" "${TUPLE}-gcc" -std=c99 -pedantic -U_FORTIFY_SOURCE "$@"
	;;
	cc|gcc|c++|g++)
		exec "${DISTCC}" "${TUPLE}-g${progname:(-2)}" "$@"
	;;
	gcc-*|g++-*)
		exec "${DISTCC}" "${TUPLE}-${progname}" "$@"
	;;
	clang*)
		if args_not_target "$@"; then
			exec  "${DISTCC}" "${progname}" -target "${TUPLE}" "$@"
		else
			exec  "${DISTCC}" "${progname}" "$@"
		fi
	;;
	*-*-*-*-clang*)
		if args_not_target "$@"; then
			TUPLE=${progname%%-clang*}
			progname=clang${progname##*-clang}
			exec  "${DISTCC}" "${progname}" -target "${TUPLE}" "$@"
		else
			exec  "${DISTCC}" "${progname}" "$@"
		fi
	;;
	*)
	exec "${DISTCC}" "${progname}" "$@"
	;;
esac

